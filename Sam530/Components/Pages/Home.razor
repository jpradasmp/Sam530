@page "/"
@rendermode InteractiveServer
@using System.Net
@using System.ComponentModel.DataAnnotations
@using DataStore
@using Sam530Core

<h3>Network Setup</h3>
<div class="col-6">
    <EditForm Model="@networkSettings" OnValidSubmit="SaveSettings" FormName="Network">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>IP Address</label>
            <InputText id="ipAddress" class="form-control" @bind-Value="networkSettings!.IpAddress" />
            <ValidationMessage For="@(() => networkSettings.IpAddress)" />
        </div>

        <div class="form-group">
            <label>Subnet Mask</label>
            <InputText id="subnetMask" class="form-control" @bind-Value="networkSettings.SubnetMask" />
            <ValidationMessage For="@(() => networkSettings.SubnetMask)" />
        </div>

        <div class="form-group">
            <label>Gateway</label>
            <InputText id="gateway" class="form-control" @bind-Value="networkSettings.Gateway" />
            <ValidationMessage For="@(() => networkSettings.Gateway)" />
        </div>

        <div style="margin-top:10px">
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </EditForm>
</div>

@if (successMessage != null)
{
    <div class="alert alert-success mt-3">@successMessage</div>
}

@if (errorMessage != null)
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private DataStore.DbStore Store = new DbStore();
    private DataStore.Models.Setups? networkSettings;
    private string? successMessage;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        networkSettings = await Store.GetSetupAsync(1);
    }


    private async void SaveSettings()
    {
        // Validación adicional puede agregarse aquí si es necesario
        if (IsValidIpAddress(networkSettings!.IpAddress) && IsValidIpAddress(networkSettings.SubnetMask) && IsValidIpAddress(networkSettings.Gateway))
        {
            await Store.UpdateSetupAsync(networkSettings);
            successMessage = $"Setup parameters has been updated. On next boot IP will be {networkSettings.IpAddress}";
            errorMessage = null;
            LinuxManager.Set_eth0(networkSettings);
        }
        else
        {
            errorMessage = "Errors on edition. Update not appied.";
            successMessage = null;
        }
    }

    private bool IsValidIpAddress(string ipAddress)
    {
        return IPAddress.TryParse(ipAddress, out _);
    }
    

}

