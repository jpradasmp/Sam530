@page "/upload"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Forms
@using Sam530.Services
@using Sam530.Components.Shared

@inject ShutdownService ShutdownService
@inject IUploadValidatorService ValidatorService
@inject IJSRuntime JS


<ProtectedPage>
    <h3>Application Update</h3>
    <h4>This option allows updating the Sam530 Linux Service.</h4>

    <div class="col-6">
        <!-- Selector de archivo -->
        <div class="form-group">
            <label>Select a .gz file:</label>
            <InputFile OnChange="@(e => OnFileSelected(e))" accept=".gz" />
        </div>

        @if (!string.IsNullOrEmpty(selectedFileName))
        {
            <div class="mt-2">Selected: <b>@selectedFileName</b></div>
        }

        <div style="margin-top:10px">
            <button type="button" class="btn btn-primary" @onclick="HandleUpload" disabled="@(selectedFile is null)">
                Upload
            </button>
        </div>
    </div>

    @if (isUploading)
    {
        <div class="d-flex align-items-center mt-3">
            <div class="spinner-border text-primary" role="status" style="width: 2rem; height: 2rem;">
                <span class="visually-hidden">Uploading...</span>
            </div>
            <span class="ms-2">Uploading file, please wait...</span>
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success mt-3"><pre>@successMessage</pre></div>

        <!-- Botón de restart -->
        <button class="btn btn-danger mt-3" @onclick="RestartService">Restart Service</button>

        <!-- Barra de progreso -->
        <div class="progress mt-3" style="height: 30px;">
            <div id="progressBar" class="progress-bar progress-bar-striped progress-bar-animated bg-success"
            role="progressbar" style="width:0%">
                0%
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }


    <script src="js/restartProgress.js"></script>

</ProtectedPage>

@code {
    private IBrowserFile? selectedFile;
    private string? selectedFileName;
    private string? successMessage;
    private string? errorMessage;
    private bool isUploading = false;

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        successMessage = null;
        errorMessage = null;

        var file = e.File;
        if (file != null && file.Name.EndsWith(".gz", StringComparison.OrdinalIgnoreCase))
        {
            selectedFile = file;
            selectedFileName = file.Name;
        }
        else
        {
            selectedFile = null;
            selectedFileName = null;
            errorMessage = "Only .gz files are allowed.";
        }
    }

    private async Task HandleUpload()
    {
        if (selectedFile == null)
        {
            errorMessage = "Please select a valid .gz file.";
            return;
        }

        isUploading = true;
        StateHasChanged();

        try
        {
            var uploadsFolder = Path.Combine(Environment.CurrentDirectory, "Uploads");
            Directory.CreateDirectory(uploadsFolder);

            // Guardar inicialmente con el nombre original en una ruta temporal
            var tempFilePath = Path.Combine(uploadsFolder, selectedFile.Name);

            await using var stream = selectedFile.OpenReadStream(maxAllowedSize: 200 * 1024 * 1024); // 200 MB
            await using (var fileStream = File.Create(tempFilePath))
            {
                await stream.CopyToAsync(fileStream);
            }

            // Validación del archivo
            if (await ValidateFile())
            {
                // Ruta definitiva con nombre fijo
                var finalFilePath = Path.Combine(uploadsFolder, "Sam530.gz");

                // Si ya existe uno anterior, lo borramos
                if (File.Exists(finalFilePath))
                {
                    File.Delete(finalFilePath);
                }

                // Renombrar el archivo válido al nombre fijo
                File.Move(tempFilePath, finalFilePath);

                successMessage = $"File uploaded and validated successfully.\nPress restart service to apply changes.\nDuring update process, communication will be lost for some minutes.\nBe patient, main page will be loaded on process end.";
                errorMessage = null;
            }
            else
            {
                errorMessage = $"The uploaded file {selectedFile.Name} is not valid.";
                successMessage = null;

                // Borrar si no es válido
                if (File.Exists(tempFilePath)) File.Delete(tempFilePath);
            }

            // Reset selección
            selectedFile = null;
            selectedFileName = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Upload failed: {ex.Message}";
            successMessage = null;
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }


    private async Task<bool> ValidateFile()
    {
        try
        {
            var requiredFiles = new[]
            {
                "publish/Sam530.dll",
                "publish/Sam530Core.dll"
            };

            var result = await ValidatorService.ValidateAsync(selectedFile!, requiredFiles);
            return result.IsValid;
        }
        catch
        {
            return false;
        }
    }

    private async Task RestartService()
    {
        try
        {
            // 🔹 Aquí deberías invocar a tu backend que hace el restart real
            // await SomeBackendApi.RestartAsync

            // 🔹 Lanza progreso en cliente
            await JS.InvokeVoidAsync("restartProgress.startPolling", "/health");

            ShutdownService.Stop();

        }
        catch (Exception ex)
        {
            errorMessage = $"Restart failed: {ex.Message}";
        }
    }
}
